openapi: 3.0.3
info:
  title: Swagger Product Assessment API - Avocade Media Melle
  description: |-
    Assessment Avocado Media API
  version: 1.0.0
tags:
  - name: product
    description: All product calls

paths:
  /product
    post:
      tags:
        - product
      summary: Add a new product
      description: Add a new product
      operationId: addProductPost
      requestBody:
        description: Create a new product
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductRequestBody'
          application/xml:
            schema:
              $ref: '#/components/schemas/ProductRequestBody'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductRequestBody'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/ProductResponse'
        '405':
          description: Invalid input
  /product/{productid}:
    put:
      tags:
        - product
      summary: Update an existing product
      description: Update an existing product by Id
      requestBody:
        description: Update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductRequestBody'
          application/xml:
            schema:
              $ref: '#/components/schemas/ProductRequestBody'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductRequestBody'
        required: true
      parameters:
        - name: productid
          in: path
          description: ID of product to update
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/ProductResponse'
        '400':
          description: Invalid ID supplied
        '404':
          description: Product not found
        '405':
          description: Validation exception
  /product/search/{keyword}:
    get:
      tags:
        - product
      summary: Finds Product by keyword
      description: Find product(s) by keyword
      operationId: findProductByKeyword
      parameters:
        - name: keyword
          in: path
          description: Keyword
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductResponse'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductResponse'
        '400':
          description: Invalid status value
  /product/index:
    get:
      tags:
        - product
      summary: Get all products
      description: Returns all product
      operationId: getProducts
      parameters:
        - name: pagination
          in: query
          description: Get the number of pagination items
          schema:
            type: string
            example: 10 (default)
          required: false
        - name: page
          in: query
          description: Define the page of the pagination
          schema:
            type: string
            example: 1 (default)
          required: false
        - name: keyword
          in: query
          description: Get results matching keyword
          schema:
            type: string
          required: false
        - name: sortPrice
          in: query
          description: Sort by price can be values 'desc' or 'asc'
          schema:
            type: string
            example: asc
          required: false
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/ProductResponse'
        '400':
          description: Invalid ID supplied
        '404':
          description: Product not found
  /product:
    get:
      tags:
        - product
      summary: Get all products
      description: Returns all product
      operationId: getProductsAll
      parameters:
        - name: pagination
          in: query
          description: Get the number of pagination items
          schema:
            type: string
            example: 10 (default)
          required: false
        - name: page
          in: query
          description: Define the page of the pagination
          schema:
            type: string
            example: 1 (default)
          required: false
        - name: keyword
          in: query
          description: Get results matching keyword
          schema:
            type: string
          required: false
        - name: sortPrice
          in: query
          description: Sort by price can be values 'desc' or 'asc'
          schema:
            type: string
            example: asc
          required: false
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/ProductResponse'
        '400':
          description: Invalid ID supplied
        '404':
          description: Product not found
  /product/{productId}:
    get:
      tags:
        - product
      summary: Find product by ID
      description: Returns a single product
      operationId: getProductById
      parameters:
        - name: productId
          in: path
          description: ID of product to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/ProductResponse'
        '400':
          description: Invalid ID supplied
        '404':
          description: Product not found
    delete:
      tags:
        - product
      summary: Deletes a product
      description: delete a product
      operationId: deletePet
      parameters:
        - name: api_key
          in: header
          description: ''
          required: false
          schema:
            type: string
        - name: productId
          in: path
          description: Product id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid product value
components:
  schemas:
    ProductResponse:
      required:
        - name
        - price
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
          description: Auto-incrementing ID
        name:
          type: string
          example: product name
        description:
          type: string
          example: product description
        price:
          type: number
          example: 20.05 (Must be decimal)
          format: number
          description: must be decimal*
      xml:
        name: product
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
    ProductRequestBody:
      type: object
      properties:
        name:
          type: string
          example: product name
        description:
          type: string
          example: product description
        price:
          type: number
          example: 20.08 (Must be decimal)
          format: number
          description: must be decimal*
        image:
          type: string
          example: image for the product, max size 10mb
      xml:
        name: product
  requestBodies:
    Product:
      description: Format that is accepted
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProductRequestBody'
        application/xml:
          schema:
            $ref: '#/components/schemas/ProductRequestBody'
